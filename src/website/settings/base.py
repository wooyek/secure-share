# coding=utf-8
"""
Django settings for this website project.

Generated by wooyek/cookiecutter-django-website

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/

# Before go-live check if your settings are suitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
"""

from __future__ import absolute_import, unicode_literals

import importlib
import locale
import logging
import re
from pathlib import Path

logging.basicConfig(format='%(asctime)s %(levelname)-7s %(thread)-5d %(filename)s:%(lineno)s | %(funcName)s | %(message)s', datefmt='%H:%M:%S')
logging.getLogger().setLevel(logging.DEBUG)
logging.disable(logging.NOTSET)

logging.debug("Settings loading: %s" % __file__)

locale.setlocale(locale.LC_ALL, '')
# locale.setlocale(locale.LC_CTYPE)

# ╭────────────────────────────────────────────────────────────────────────────
# │ This is a composite strategy for setting up django website instance.
# │ We import default component settings and customise them below in this file
# │ To disable or enable particular component just comment or uncomment a component import

settings_components = (
    'debug_toolbar',
    'django_assets',
    # 'celery',
    'import_export',
    'pycountry',
    'sentry',
    'django_opt_out',
    'django_email_queue',
    # 'django_filer',
    # 'django_hunger',
    # 'oauth_toolkit',
    # 'rest_framework',
    # 'gis',
    # 'intercom',
    'pure_pagination',
    # 'google_cloud_storage',
)

setting_filter = re.compile("^[A-Z]([A-Z0-9_])*$")

for component in settings_components:
    mod = importlib.import_module("." + component, 'website.settings.components')
    globals().update({name: value for name, value in mod.__dict__.items() if setting_filter.match(name)})

# Other imports can cause change in core settings
# we should import core last
from .components.core import *  # noqa: F402 F403 isort:skip
from .components import core  # noqa: F402 F403 isort:skip

# │ Customizations made for this project only should go bellow
# ╰────────────────────────────────────────────────────────────────────────────

MIDDLEWARE += (  # noqa: F405
    # https://docs.djangoproject.com/pl/2.1/ref/contrib/flatpages/#installation
    # 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware'
    'django_user_agents.middleware.UserAgentMiddleware',
)

INSTALLED_APPS += (  # noqa: F405
    # 'django.contrib.sites',
    # 'django.contrib.flatpages',
    'django.contrib.postgres',
    'bootstrapform',
    'admin_ordering',
    # 'django_babel',
    # 'guardian',
    'reversion',
    'django_user_agents',
    # 'django_filters',
    'django_powerbank.apps.DjangoPowerbankConfig',
    'django_error_views.apps.DjangoErrorViewsConfig',
    # 'localflavor',
    # 'django_gravatar',
    # 'misc.choose_language',
    'secure_share.apps.SecureShareConfig',
)

# AUTH_USER_MODEL = 'secure_share.CustomUser'

LANGUAGE_CODE = 'pl'
TIME_ZONE = 'Europe/Warsaw'

# https://docs.djangoproject.com/en/1.9/topics/i18n/translation/#how-django-discovers-language-preference
import django_error_views  # noqa F402 isort:skip

LOCALE_PATHS += [  # noqa: F405
    str(Path(django_error_views.__file__).parent / 'locales'),
    str(BASE_DIR / 'locales'),
]

SANDBOX = core.env("SANDBOX", default=True, cast=bool)
DEFAULT_PAGE_CACHE = core.env("DEFAULT_PAGE_CACHE", default=3600, cast=bool)

USER_AGENTS_CACHE = 'default'


def filter_deprecation_warnings(record):
    warnings_to_suppress = [
        'RemovedInDjango30Warning'
    ]
    msg = record.getMessage()
    return not any([warn in msg
                    for warn in warnings_to_suppress
                    if not msg.startswith(str(core.BASE_DIR / 'src'))])


logging.getLogger('py.warnings').addFilter(filter_deprecation_warnings)
